// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	rents "be9/mnroom/features/rents"

	mock "github.com/stretchr/testify/mock"
)

// RentData is an autogenerated mock type for the Data type
type RentData struct {
	mock.Mock
}

// GetData provides a mock function with given fields: id
func (_m *RentData) GetData(id int) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataRent provides a mock function with given fields: id
func (_m *RentData) GetDataRent(id int) ([]rents.Core, error) {
	ret := _m.Called(id)

	var r0 []rents.Core
	if rf, ok := ret.Get(0).(func(int) []rents.Core); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rents.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataRentToken provides a mock function with given fields: idToken, idRoom
func (_m *RentData) GetDataRentToken(idToken int, idRoom int) (int, error) {
	ret := _m.Called(idToken, idRoom)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(idToken, idRoom)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(idToken, idRoom)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataRentUser provides a mock function with given fields: id, start, end
func (_m *RentData) GetDataRentUser(id int, start string, end string) (int, error) {
	ret := _m.Called(id, start, end)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, string, string) int); ok {
		r0 = rf(id, start, end)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string, string) error); ok {
		r1 = rf(id, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataRentUserHistory provides a mock function with given fields: idToken
func (_m *RentData) GetDataRentUserHistory(idToken int) ([]rents.Core, error) {
	ret := _m.Called(idToken)

	var r0 []rents.Core
	if rf, ok := ret.Get(0).(func(int) []rents.Core); ok {
		r0 = rf(idToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rents.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataUser provides a mock function with given fields: idToken
func (_m *RentData) GetDataUser(idToken int) (rents.CoreUser, error) {
	ret := _m.Called(idToken)

	var r0 rents.CoreUser
	if rf, ok := ret.Get(0).(func(int) rents.CoreUser); ok {
		r0 = rf(idToken)
	} else {
		r0 = ret.Get(0).(rents.CoreUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertData provides a mock function with given fields: insert
func (_m *RentData) InsertData(insert rents.Core) (int, error) {
	ret := _m.Called(insert)

	var r0 int
	if rf, ok := ret.Get(0).(func(rents.Core) int); ok {
		r0 = rf(insert)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(rents.Core) error); ok {
		r1 = rf(insert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertDataPayment provides a mock function with given fields: insert
func (_m *RentData) InsertDataPayment(insert rents.CorePayments) (rents.CorePayments, error) {
	ret := _m.Called(insert)

	var r0 rents.CorePayments
	if rf, ok := ret.Get(0).(func(rents.CorePayments) rents.CorePayments); ok {
		r0 = rf(insert)
	} else {
		r0 = ret.Get(0).(rents.CorePayments)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(rents.CorePayments) error); ok {
		r1 = rf(insert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRentData interface {
	mock.TestingT
	Cleanup(func())
}

// NewRentData creates a new instance of RentData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRentData(t mockConstructorTestingTNewRentData) *RentData {
	mock := &RentData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
