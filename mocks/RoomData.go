// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	rooms "be9/mnroom/features/rooms"

	mock "github.com/stretchr/testify/mock"
)

// RoomData is an autogenerated mock type for the Data type
type RoomData struct {
	mock.Mock
}

// DeleteData provides a mock function with given fields: id
func (_m *RoomData) DeleteData(id int) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetData provides a mock function with given fields: id
func (_m *RoomData) GetData(id int) (rooms.Core, error) {
	ret := _m.Called(id)

	var r0 rooms.Core
	if rf, ok := ret.Get(0).(func(int) rooms.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(rooms.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataAll provides a mock function with given fields: page
func (_m *RoomData) GetDataAll(page int) ([]rooms.Core, error) {
	ret := _m.Called(page)

	var r0 []rooms.Core
	if rf, ok := ret.Get(0).(func(int) []rooms.Core); ok {
		r0 = rf(page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rooms.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataAllUserRoom provides a mock function with given fields: idToken
func (_m *RoomData) GetDataAllUserRoom(idToken int) ([]rooms.Core, error) {
	ret := _m.Called(idToken)

	var r0 []rooms.Core
	if rf, ok := ret.Get(0).(func(int) []rooms.Core); ok {
		r0 = rf(idToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rooms.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataByCategory provides a mock function with given fields: id
func (_m *RoomData) GetDataByCategory(id int) ([]rooms.Core, error) {
	ret := _m.Called(id)

	var r0 []rooms.Core
	if rf, ok := ret.Get(0).(func(int) []rooms.Core); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rooms.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataIDRoom provides a mock function with given fields: id
func (_m *RoomData) GetDataIDRoom(id int) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetToken provides a mock function with given fields: id, idToken
func (_m *RoomData) GetToken(id int, idToken int) (rooms.Core, error) {
	ret := _m.Called(id, idToken)

	var r0 rooms.Core
	if rf, ok := ret.Get(0).(func(int, int) rooms.Core); ok {
		r0 = rf(id, idToken)
	} else {
		r0 = ret.Get(0).(rooms.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, idToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertData provides a mock function with given fields: insert
func (_m *RoomData) InsertData(insert rooms.Core) (rooms.Core, error) {
	ret := _m.Called(insert)

	var r0 rooms.Core
	if rf, ok := ret.Get(0).(func(rooms.Core) rooms.Core); ok {
		r0 = rf(insert)
	} else {
		r0 = ret.Get(0).(rooms.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(rooms.Core) error); ok {
		r1 = rf(insert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertDataRoomFacilitys provides a mock function with given fields: insert
func (_m *RoomData) InsertDataRoomFacilitys(insert rooms.CoreRoomFacilitys) (int, error) {
	ret := _m.Called(insert)

	var r0 int
	if rf, ok := ret.Get(0).(func(rooms.CoreRoomFacilitys) int); ok {
		r0 = rf(insert)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(rooms.CoreRoomFacilitys) error); ok {
		r1 = rf(insert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateData provides a mock function with given fields: id, insert
func (_m *RoomData) UpdateData(id int, insert rooms.Core) (int, error) {
	ret := _m.Called(id, insert)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, rooms.Core) int); ok {
		r0 = rf(id, insert)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, rooms.Core) error); ok {
		r1 = rf(id, insert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRoomData interface {
	mock.TestingT
	Cleanup(func())
}

// NewRoomData creates a new instance of RoomData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRoomData(t mockConstructorTestingTNewRoomData) *RoomData {
	mock := &RoomData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
